* Key characteristics of distributed systems include:
    - Scalabilitiy
    - Reliabilitiy
    - Availability
    - Efficiency 
    - Manageability 

* Scalability 
    - Scalability is the capabilitiy of a system, process, or network to grow and
      manage increased demand. Any distributed system that can continuously evolve
      in order to support the growing amount of work is considered to be scalable.
    - System might have to scale for a variety of reasons: i.e. increased data volume
      or increased amount of work (i.e. increased number of transactions). A 
      scalable system would like to acheive this without performance loss.
    - Generally, the performance of a system, although designed (or claimed) to be
      scalable, declines with the system size due to the management or environment cost.
        * For example, network speed may become slower because systems are further apart.
        * More generally, some tasks not be distributed, because of their inherent
          atomic nature or flaw in the system design. At some point, some tasks would
          limit the speed-up obtained by distribution.
        * Scalable architecture tries to avoid these situations by attempting to balance
          the load on all the participating nodes evenly.
    - Horizontal/Vertical Scaling
        * Horizontal Scaling
            - Scale by adding more servers to pool
            - Often easier to scale dynamically by adding more machines
            - examples: MongoDB, Cassandra -> both provide easy ways to scale horizontally
              by adding more machines to meet growing needs
        * Vertical Scaling
            - Scale by adding more power to an existing server (RAM, CPU, storage)
            - Limited by the capacity of the existing server and scaling beyond
              that capacity involves downtime and comes with an upper limit
            - example: MySQL -> allows for an easy way to scale vertically by switching
              from smaller to bigger machines

        vertical scaling            horiztonal scaling
        small                       small

        b i g g e r                 small, small

        B I G                       small, small, small

* Reliability
    - Probability that a system will fail in a given time period
    - A distributed system is reliable if it keeps delivering services even if one
      or more software or hardware componenets fail.
    - Reliabilitiy represents one of the main characteristics of any distributed system
      since in such systems any failing machine can always be replaced by another healthy one
      ensuring the completion of the task
    - Example: large ecommerce like Amazon
        * One primary requirement would be a transaction should never be canceled
          due to the failure of the machine running the transaction
        * if item added to shopping cart, system should not lose it
        * Reliable system does this by having redundancies of both software 
          components and data components 
        * If a server holding shopping cart information fails, another server that
          has exact replica should replace it
    - Redundancy has a cost. A reliable system has to pay that cost to achieve 
      such resilience for services by eliminating every point of failure. 

* Availability
    - The time a system remains operational to perform its required function in a 
      specific period.
    - It is a simple measure of the percentage of time that a system, service, or
      a machine remains operational under normal conditions.
    - An aircraft that can be flown for many hours a month without downtime is
      said to have high availability
    - Availability takes into account:
        * maintainability, repair time, spares availability, and other logistic considerations
    - Reliabilitiy is availability over time considering the full range of possible
      real-world conditions that can occur. An aircraft that can make it through any 
      possible weather safely is more reliable than one that has vulnerabilities to
      possible conditions
    - Reliabilitiy vs. Availability
        * If a system is reliable, it is available.
        * However, if a system is available it is not necessairly reliable. 
        * i.e. it is possible to acheive high availability but never be reliable
            - Considering ecommerce site that has 99.99% availabilty for 2 years.
            - Was designed without information security testing 
            - Information security breaches in 3rd year -> suddenly low
              availability for extended period of times -> Was never reliable 


* Efficiency 
    - To understand efficiency, consider operation that runs on the distributed system
      and returns a set of items as a result.
    - Two standard measures of effiency are:
        * Response Time (Latency) - time to get first item
            - Corresponds to unit cost of number of messages sent globally by the
              nodes of the system regardless of the message size
        * Throughput (Bandwidth) - number of items delivered in a given time unit
            - Corresponds to unit cost of size of messages representing the volume
              of data exchanges 
    - The complexity of operations supported by distributed data structures
      (i.e. searching for a specific key in a distributed index) can be characterized
      as a function of one these cost units.
        * Generally speaking, the analysis of a distributed structure in terms of 
          "number of messages" is over-simplistic. It ignores the impact of many aspects,
          including:
            - network topology
            - network load
            - variation of network load
            - possible heterogeneity of the softwarea nd hardware componenets in data
              processing and routing
            - etc.
        * However, quite difficult to develop a precise cost model that would accurately 
          take into account all these performance factors. 
            - Must live with rough but robust estimates of system behavior.

* Serviceability of Manageability
    - The simplicity and speed with which a system can be repaired or maintained 
    - Another important consideration while designing a distributed system is how
      easy it is to service or maintain
    - If the time to fix a failed system increases, then availability will decrease
    - Things to consider for manageability is:
        * ease of diagnosing and understanding problems when they occur
        * ease of making updates or modifications
        * how simple the system is to operate  (does it routinly operaet without failure or exceptions?)
        * Early detection of faults can decrease or avoid system downtime
            - Some enterprise system call a service center (without human intervention)
              when the system experiences a system fault
    
    
