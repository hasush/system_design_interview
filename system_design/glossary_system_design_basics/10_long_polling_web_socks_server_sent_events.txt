* What is the difference between long polling websockets and server sent events?
    - Popular communication protocols between a client like a web browser 
      and a web server 

* Standard HTTP request 
    - Client opens a connection and requests data from the server
    - Server calculates the response 
    - Server sends back response to client on the opened request 

* Ajax Polling
    - AJAX = Asynchronous JavaScript And XML
    - standard polling for vast majority of AJAX applications 
    - Client repeatidly polls (requests) data from a server
        * Client opens up an http connection and requests data
          from the server using regular HTTP 
        * The requested webpage sends requests to the server 
          at regular intervals (i.e. 0.5 seconds)
        * The server calculates the response and sends it back
          just like regular HTTP traffic.
        * The client repeats the above three steps periodically to 
          get updates from the server.
    - Problem with polling is that client has to keep asking server
      for new data and server sends empty respones resulting in a lot of
      HTTP overhead 
    
* HTTP Long-Polling 
    - Variation of the traditional polling technique that allows the server to 
      push informatino to a client whenever the data is available.
    - With long polling, the client requests information from the server but
      with the expectation that the server might not respond immediately. 
        * "Hanging Get"
        * If the server does not have any data for the client, instead of 
          sending an empty response, the server holds the request and 
          waits until some data becomes available.
        * One the data becomes available, a full response is sent to the client.
          The client then immediately re-requests information from the server so
          that the server will almost always have an available waiting request 
          that it can use to deliver data in response to an event. 
    - Basic life cycle of an application using HTTP Long-Polling is
        * Client makes response using regular HTTP and then waits for response 
        * Server delays its response until an update is available or a timeout occurs 
        * When update is available, server sends full response to the client.
        * The client then sends another long poll response. Either immediately, or
          after a delay to allow an acceptable latency. 
        * Each long poll request has a timeout. Client has to reconnect periodically
          after the connection is closed due to timeouts.

* WebSockets 
    - Provides full duplex communication channels over a single TCP connection.
    - Provides consistent connection between a client and a server that both
      parties can use to start sending data at any time. 
    - Client establishes websock connection using websocket handshake.
    - If process succeeds, then the server and client can exchange data in both
      directions at any time.
    - The websocket protocol enables communication between a client and a server with
      lower overheads, facilitating real-time data transfers from and to the servers.
    - This is made possible by providing a standardized way for the server to send
      content to the browser without being asked by the client and allowing for
      messages to be passed back and forth while keeping the connection open. 
    - In this way, a two way bidirectional conversation happens between the server
      and the client.

* Server-Sent Events (SSEs)
    - Under SSEs the client establishes a persistent and long term connection
      with the server. 
    - The server user this connection to send data to a client. 
    - If the client wants to send another request to the server, it must do so
      with some other technology/protocol.
    - Steps
        * Client requests data from a server using regular HTTP
        * The requested webpage opens a connection to the server.
        * The sends sends the data to the client whenver there new information
          available.
    - SSEs are best when we need real-time traffic from the servers to the client
      or if the server is generating data in a loop and will be sending multiple
      events to the client. 